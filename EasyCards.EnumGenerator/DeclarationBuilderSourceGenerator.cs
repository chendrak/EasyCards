using System;
using System.CodeDom.Compiler;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace EasyCards.EnumGenerator
{
    public abstract class DeclarationBuilderSourceGenerator : ISourceGenerator
    {
        private const string AutoGeneratedComment = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";
        public virtual void Initialize(GeneratorInitializationContext context)
        {
        }

        public abstract void Execute(GeneratorExecutionContext context);

        protected void CreateSourceContentInDefaultNamespace(
            GeneratorExecutionContext context,
            string className,
            string classText,
            params string[] usingStatements
        ) =>
            CreateSourceContent(context, className, context.Compilation.AssemblyName, classText, usingStatements);

        protected void CreateSourceContent(GeneratorExecutionContext context, string className, string @namespace,
            string classText, params string[] usingStatements)
        {
            var builder = new StringBuilder();
            using (var stringWriter = new StringWriter(builder))
            using (var indentedTextWriter = new IndentedTextWriter(stringWriter, tabString: "    "))
            {
                indentedTextWriter.WriteLine(AutoGeneratedComment.TrimStart());
                foreach (var @using in usingStatements)
                {
                    indentedTextWriter.Write("using ");
                    indentedTextWriter.Write(@using);
                    indentedTextWriter.WriteLine(";");
                }

                if (!string.IsNullOrWhiteSpace(@namespace))
                {
                    indentedTextWriter.Write("namespace ");
                    indentedTextWriter.WriteLine(@namespace);
                    indentedTextWriter.WriteLine("{");
                    indentedTextWriter.Indent += 1;
                }

                foreach (var line in classText.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                             .Select(i => i.Trim()))
                {
                    if (string.IsNullOrWhiteSpace(line)) continue;
                    if (line == "}")
                    {
                        indentedTextWriter.Indent -= 1;
                    }

                    indentedTextWriter.WriteLine(line);

                    if (line == "{")
                    {
                        indentedTextWriter.Indent += 1;
                    }
                }

                if (!string.IsNullOrWhiteSpace(@namespace))
                {
                    indentedTextWriter.Indent -= 1;
                    indentedTextWriter.WriteLine("}");
                }

                indentedTextWriter.Flush();

                context.AddSource($"{className}.g.cs", builder.ToString());
            }
        }
    }
}